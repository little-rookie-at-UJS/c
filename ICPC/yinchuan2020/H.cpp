//
// Created by DELLPC on 24-4-21.
//
#include<bits/stdc++.h>
using namespace std;
#define irep(i, l, r) for(int i = l; i <= r; ++ i)
#define drep(i, r, l) for(int i = r; i >= l; -- i)
const int N = 500000 +7;
const int mod = 1000000000 + 7;
#define ll long long
#define LD double

struct point{
    LD x, y, z;
    point(){}
    point(LD x1, LD y1, LD z1){
        x = x1, y = y1, z = z1;
    }
    point operator + (const point A)const{
        return point(x + A.x, y + A.y, z + A.z);
    }
};


point rot(point z0, LD t1, LD t2){
    auto [x, y, z] = z0;
    LD t = atan2(x, y), rho = sqrt(x * x + y * y);
    t += t1;
    x = rho * cos(t), y = rho * sin(t);
    t = atan2(x, z), rho = sqrt(x * x + z * z);
    t += t2;
    x = rho * cos(t), z = rho * sin(t);
    return point(x, y, z);
}
LD dis(point A, point B){
    return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) *(A.y - B.y) + (A.z - B.z) * (A.z - B.z));
}
void solve(){
    vector<vector<point>>base = {
            {},
            {{ 0.000000000,0.000000000,0.000000000},
             {1.000000000,0.000000000,0.000000000}},

            {{ 0.000000000,0.000000000,0.000000000},
                    {1.000000000,0.000000000,0.000000000},
                    {0.500000000,0.866025404,0.000000000}},
            {
                    {0.500000000,0.000000000,-0.353553391},
                    {-0.500000000,0.000000000,-0.353553391},
                    { 0.000000000,0.500000000,0.353553391},
                    { 0.000000000,-0.500000000,0.353553391}
            },
            {
                    {0.707106781,0.000000000,0.000000000},
                    {-0.707106781,0.000000000,0.000000000},
                    {0.000000000,0.707106781,0.000000000},
                    {0.000000000,-0.707106781,0.000000000},
                    {0.000000000,0.000000000,0.707106781},
                    {0.000000000,0.000000000,-0.707106781}
            },
            {
                    { 0.000000000, 0.500000000, 0.809016994},
                    { 0.000000000, -0.500000000, 0.809016994},
                    { 0.000000000, 0.500000000 ,-0.809016994},
                    { 0.000000000, -0.500000000 ,-0.809016994},
                    { 0.500000000, 0.809016994 ,0.000000000},
                    { 0.500000000, -0.809016994, 0.000000000},
                    { -0.500000000, 0.809016994 ,0.000000000},
                    { -0.500000000, -0.809016994, 0.000000000},
                    { 0.809016994, 0.000000000 ,0.500000000},
                    { 0.809016994, 0.000000000,-0.500000000},
                    { -0.809016994,0.000000000, 0.500000000},
                    { -0.809016994,0.000000000,-0.500000000}
            }
    };
    base.resize(11);
    int n;
    cin >> n;
    vector<array<int, 2>>add(11);
    add[6] = {3,3};
    add[7] = {3,4};
    add[8] = {4,4};
    add[9] = {8,1};
    add[10] = {6, 4};
    //16 * 6
    //32 * 3 = 96
    irep(i, 6, 10){
        vector<point>A, B;
        auto [p1, p2] = add[i];
        A = base[p1], B = base[p2];
        for(auto &L : A){
            if(n == 10)L = rot(L, -0.27, 0.3);
            else L = rot(L, 0.7, 0.85);

        }
//        base[i] = A;
        for(auto p:A){
            for(auto q : B){
                base[i].push_back(p + q);
            }
        }
    }
    cout << setprecision(12);

    cout << base[n].size() <<'\n';
    for(auto A : base[n]){
        cout << A.x << ' ' << A.y << ' ' << A.z << endl;
    }
    int K = base[n].size();
//    irep(i, 0, K - 1){
//        int cnt = 0;
//        irep(j, 0, K - 1){
//            if(dis(base[n][i], base[n][j]) < 1.000001 && dis(base[n][i], base[n][j]) >= 0.999999)
//                ++ cnt;
//           // cout << dis(base[n][i], base[n][j]) << endl;
//           if(i == j)continue;
//           assert(dis(base[n][i], base[n][j]) > 0.01);
//        }
//        cout << cnt << endl;
//    }
    return;
}

int main(){
    int T = 1;
//    cin >> T;
    while(T --){
        solve();
    }
    return 0;
}
/*
 2
 0.000000000 0.000000000 0.000000000
 1.000000000 0.000000000 0.000000000
3
{ 0.000000000,0.000000000,0.000000000},
 {1.000000000,0.000000000,0.000000000},
 {0.500000000,0.866025404,0.000000000}
 4
 {0.500000000,0.000000000,-0.353553391},
 {-0.500000000,0.000000000,-0.353553391},
{ 0.000000000,0.500000000,0.353553391},
{ 0.000000000,-0.500000000,0.353553391}
  6
 {0.707106781,0.000000000,0.000000000},
 {-0.707106781,0.000000000,0.000000000},
 {0.000000000,0.707106781,0.000000000},
 {0.000000000,-0.707106781,0.000000000},
 {0.000000000,0.000000000,0.707106781},
 {0.000000000,0.000000000,-0.707106781}

12
{ 0.000000000, 0.500000000, 0.809016994},
{ 0.000000000, -0.500000000, 0.809016994},
{ 0.000000000, 0.500000000 ,-0.809016994},
{ 0.000000000, -0.500000000 ,-0.809016994},
{ 0.500000000, 0.809016994 ,0.000000000},
{ 0.500000000, -0.809016994, 0.000000000},
{ -0.500000000, 0.809016994 ,0.000000000},
{ -0.500000000, -0.809016994, 0.000000000},
{ 0.809016994, 0.000000000 ,0.500000000},
{ 0.809016994, 0.000000000,-0.500000000},
{ -0.809016994,0.000000000, 0.500000000},
{ -0.809016994,0.000000000,-0.500000000},
 *
 */